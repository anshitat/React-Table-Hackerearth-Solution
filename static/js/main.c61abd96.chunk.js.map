{"version":3,"sources":["components/columns.js","components/Search.js","components/SelectedPlayer.js","components/CheckBox.js","components/Table.js","App.js","components/GameScreen.js","reportWebVitals.js","index.js"],"names":["COLUMNS","Header","accessor","value","Math","floor","random","Cell","height","src","Search","filter","setFilter","className","style","fontSize","color","aria-hidden","placeholder","onChange","e","target","SelectedPlayer","selectedRowIds","selectedFlatRows","console","log","marginLeft","padding","length","map","row","original","Name","Bet","Price","id","margin","to","pathname","aboutProps","players","disabled","CheckBox","React","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","type","Table","loading","mockdata","columns","useMemo","data","useTable","useGlobalFilter","usePagination","useRowSelect","hooks","visibleColumns","push","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","page","nextPage","previousPage","canPreviousPage","canNextPage","state","setGlobalFilter","globalFilter","pageIndex","pageSize","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","position","top","left","transform","getRowProps","cells","cell","getCellProps","Object","keys","onClick","App","useState","setLoading","setMockdata","fetch","then","res","json","catch","err","GameScreen","props","value_generated","setValue_generated","history","useHistory","location","players_group","values","Wins","goBack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.c61abd96.chunk.js","sourcesContent":["export const COLUMNS =[\r\n    {\r\n        Header : 'Player Name',\r\n        accessor : 'Name',\r\n    },\r\n    {\r\n        Header : 'Level',\r\n        accessor : (value)=>{return Math.floor(Math.random()*10)}\r\n    },\r\n    {\r\n        Header : 'Avatar',\r\n        accessor: 'Profile Image',\r\n        Cell : (value) =>{\r\n            return <img  height={25} src={value.value} />\r\n        },\r\n    },\r\n    {\r\n        Header : '🎯Bet',\r\n        accessor : 'Bet',\r\n    },\r\n    {\r\n        Header : 'Wins',\r\n        accessor : (value) =>{\r\n            return (\r\n                Math.floor(Math.random()*30 + 1)\r\n            )\r\n        },\r\n    },\r\n    { \r\n        Header : 'Lost',\r\n        accessor : (value) =>{\r\n            return (\r\n                Math.floor(Math.random()*10 + 1)\r\n            )\r\n        },\r\n    },\r\n    {\r\n        Header : '💰Price',\r\n        accessor : 'Price',\r\n        value : 'pending'\r\n    },\r\n    {\r\n        Header : 'Status',\r\n        accessor : 'Status'\r\n    }\r\n]","import React from 'react'\r\nimport '../App.css'\r\n\r\nfunction Search({filter, setFilter}) {\r\n    return (\r\n        <div className='top-section'>\r\n            <h2 style={{\r\n                fontSize : \"16px\",\r\n                color : \"#2510D7\"\r\n                \r\n            }}>\r\n            Select Players 9</h2>\r\n            <div className='SearchSection'>\r\n                <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n                <input className='input-search' \r\n                    placeholder='Search Players'\r\n                    value={filter || ''}\r\n                    onChange={(e)=>setFilter(e.target.value)}\r\n\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nfunction SelectedPlayer({selectedRowIds , selectedFlatRows}) {\r\n    console.log('Selected Flat Rows : ', selectedFlatRows)\r\n    return (\r\n        <div className='Select' >\r\n\r\n            <div className='Scroll-Selected'>\r\n                <p style={{ \r\n                     fontSize : '12px',\r\n                     color : 'gray',\r\n                     marginLeft : '20px',\r\n                     padding : '5px',\r\n                  }}>Playing {selectedFlatRows.length}\r\n                </p>  \r\n\r\n            { (selectedFlatRows.length > 0 ) ? \r\n              <div  className='selected-player-div'  >\r\n                        {selectedFlatRows.map( row => {\r\n                            const { Name , Bet, Price} = row.original\r\n                            return(\r\n                                    <div key={selectedRowIds.id} className='Player'>\r\n                                        <div>\r\n                                            <img src={ row.original['Profile Image'] }/>\r\n                                        </div>\r\n                                        <div className='name-div'>\r\n                                            <p>{ Name }</p>\r\n                                            <p>🎯{Bet} </p>\r\n                                        </div>\r\n                                        <span>💰{Price}</span>\r\n                                    </div>\r\n                            )\r\n                        })}\r\n                    \r\n              </div>\r\n              : <p style={{ \r\n                     fontSize : '14px',\r\n                     color : 'gray',\r\n                     margin : '40x',\r\n                     padding : '5px',\r\n                  }}>No Player selected yet !!</p>  \r\n            }\r\n            </div>\r\n\r\n            <Link to={{\r\n                pathname: '/GameScreen',\r\n                aboutProps : {\r\n                    players : selectedFlatRows\r\n                }\r\n            }} >\r\n             <button className='start-btn' disabled={(selectedFlatRows.length!=9)}>START</button>            \r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectedPlayer\r\n","import React from 'react'\r\n\r\nexport const CheckBox = React.forwardRef(\r\n    ({ indeterminate, ...rest }, ref) => {\r\n      const defaultRef = React.useRef()\r\n      const resolvedRef = ref || defaultRef\r\n  \r\n      React.useEffect(() => {\r\n        resolvedRef.current.indeterminate = indeterminate\r\n      }, [resolvedRef, indeterminate])\r\n  \r\n      return (\r\n        <>\r\n          <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n        </>\r\n      )\r\n    }\r\n)\r\nexport default CheckBox","import React ,{ useMemo , useState} from 'react'\r\nimport { useTable , useGlobalFilter, usePagination , useRowSelect} from 'react-table'\r\nimport '../App.css'\r\nimport { COLUMNS } from './columns.js'\r\nimport Search from './Search'\r\nimport SelectedPlayer from './SelectedPlayer'\r\nimport CheckBox from './CheckBox'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nfunction Table( {loading , mockdata} ) {\r\n    console.log('Loading : ',loading)\r\n    console.log('Mock Data : ', mockdata)\r\n    const columns  = useMemo(() => COLUMNS, [] )\r\n    const data = useMemo(() =>mockdata, [mockdata])\r\n    console.log('columns : ', columns)\r\n    console.log('data : ', data)\r\n\r\n    //table instance\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        page,\r\n        nextPage,\r\n        previousPage,\r\n        canPreviousPage,\r\n        canNextPage,\r\n        state,\r\n        setGlobalFilter,\r\n        selectedFlatRows\r\n    } = useTable({\r\n        columns, \r\n        data\r\n    },\r\n        useGlobalFilter,\r\n        usePagination,\r\n        useRowSelect,\r\n        (hooks)=>{\r\n            hooks.visibleColumns.push((columns) =>{\r\n                return[\r\n                    {\r\n                        id : 'selection',\r\n                        Header : 'Select',\r\n                        Cell : ( {row} )=>\r\n                            <CheckBox {...row.getToggleRowSelectedProps()}/>\r\n                    },\r\n                    ...columns,\r\n                ]\r\n            })\r\n        }\r\n    )\r\n\r\n    const { globalFilter, pageIndex, pageSize, selectedRowIds } = state\r\n\r\n    return (\r\n        <>\r\n        <SelectedPlayer selectedRowIds={selectedRowIds}\r\n            selectedFlatRows={selectedFlatRows}\r\n         />\r\n        <div>\r\n\r\n        <Search filter={globalFilter} \r\n            setFilter = {setGlobalFilter}\r\n        />\r\n\r\n            <table {...getTableProps()} >\r\n                <thead>\r\n                {headerGroups.map( headerGroup =>(\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map( column =>(\r\n                            <th {...column.getHeaderProps()}>\r\n                                { column.render('Header') }\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n                </thead>\r\n        \r\n                { loading && <h1 style={{\r\n                    position : \"absolute\" ,\r\n                    top : \"50%\",\r\n                    left : \"60%\",\r\n                    transform :\"translateX(-50%)\"\r\n\r\n                }} >Loading...</h1> }\r\n\r\n                <tbody {...getTableBodyProps()}>\r\n                    {page.map(row => {\r\n                        prepareRow(row)\r\n                        return(\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map(cell =>{\r\n                                    return(\r\n                                        <td {...cell.getCellProps()} >\r\n                                            {cell.render('Cell')} \r\n                                        </td>\r\n                                    )\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n\r\n            <div className = 'pagination-div'>\r\n            <div>\r\n                <p>Selected Players: {Object.keys(selectedRowIds).length}</p>\r\n            </div>\r\n            <div>\r\n                <button onClick={()=>previousPage()} disabled={!canPreviousPage}> \r\n                <ChevronLeftIcon />\r\n                </button>\r\n\r\n                <span>{pageSize*(pageIndex+1)} of {rows.length}</span>\r\n\r\n                <button onClick={()=>nextPage()} disabled={!canNextPage}> \r\n                   <ChevronRightIcon />\r\n                </button> \r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React ,{ useState, useEffect, useMemo } from 'react'\nimport './App.css'\nimport Table from './components/Table'\n\nfunction App() {\n  const [loading, setLoading] = useState(false)\n  const [mockdata, setMockdata] = useState([])\n\n  const fetchData = () =>{\n    setLoading(true)\n    let url = 'https://s3-ap-southeast-1.amazonaws.com/he-public-data/bets7747a43.json'\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) =>{\n        setMockdata( mockdata => data)\n        setLoading(false)\n        console.log('Original Data : ',data)\n      })\n      .catch((err) =>{\n        console.log(err)\n        setLoading(false)\n      })\n  }\n  useEffect(()=>{\n    fetchData()\n  }, [])\n\n  return (\n    <div className='App' >\n      <Table loading={loading} mockdata={mockdata} />\n    </div>\n  )\n}\n\nexport default App\n","import React ,  { useState , useEffect } from 'react'\r\nimport '../App.css'\r\nimport { NativeRouter, useHistory } from 'react-router-dom'\r\n\r\n\r\nfunction GameScreen(props) {\r\n    // const [status ,  setStatus]  = useState('STATUS')\r\n    const [ value_generated, setValue_generated ] = useState('PRESS')\r\n    let history = useHistory()\r\n    console.log(props.location.aboutProps.players)\r\n\r\n    const players_group = props.location.aboutProps.players\r\n\r\n\r\n\r\n    const setValue = () =>{\r\n        setValue_generated( value_generated =>\r\n                Math.floor(Math.random()*10) + 1\r\n         )\r\n    }\r\n    \r\n\r\n    console.log('PRop: ', players_group )\r\n    return (\r\n        <div className='game-board'>\r\n            {/* <h1>Game Start</h1> */}\r\n            {\r\n                players_group.map( row => {\r\n                    return (\r\n                \r\n                        <div className={`player-card ${ ( value_generated == 'PRESS' )\r\n                                        ? 'status'\r\n                                        :\r\n                                        (value_generated == row.values.Bet)\r\n                                            ?'win':'loss'} `}>\r\n                            <div>\r\n                                <img  src={ row.values['Profile Image'] } />\r\n                                <p className='player-name' >{ row.values.Name }</p>\r\n                            </div>\r\n                            <div>\r\n                                <p> 💰{ \r\n                                    ( value_generated == row.values.Bet )\r\n                                        ?(row.values.Price)*2\r\n                                            : (row.values.Price)\r\n                                            \r\n                                       \r\n                                }  </p>\r\n                                <p> 🎯{row.values.Bet} </p>\r\n                            </div>\r\n                            <div>\r\n                                <p> 🏆{row.values.Wins} </p>\r\n                            </div>\r\n\r\n                            <span className='status-bar' > \r\n                                { \r\n                                    ( value_generated == 'PRESS' )\r\n                                        ? 'STATUS'\r\n                                        :\r\n                                        (value_generated == row.values.Bet)\r\n                                            ?'WIN':'LOSS'\r\n                                } \r\n\r\n                            </span>\r\n\r\n                        </div>\r\n                    )\r\n\r\n                } )       \r\n            }\r\n        \r\n          <div onClick={ setValue }  className = 'toss-div'>\r\n                { value_generated }    \r\n          </div>\r\n\r\n          <button className='back-btn'\r\n            onClick={()=>history.goBack()}\r\n          >Back</button>\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameScreen\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport GameScreen from './components/GameScreen'\nimport reportWebVitals from './reportWebVitals';\nimport { Route, Link, Switch , BrowserRouter as Router} from 'react-router-dom'\n\n\nReactDOM.render(\n    <>\n        <Router>\n          <Switch>\n            <Route exact path =\"/\" component={App}></Route>\n            <Route  path =\"/GameScreen\" component={GameScreen}></Route>\n          </Switch>\n        </Router>\n    </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}